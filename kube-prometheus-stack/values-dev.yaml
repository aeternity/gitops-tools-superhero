encValues:
  github_client_id: 'AgC1TpUgIAfpH39Kgls40LL2Loje6jGF075Sxj79k2zFnTS9R8mpF7OfRNnwaTDrYrrwFQz39Z5UD8iG4KhHUZVtTUl5g5YFk0XsaGOQyddTjxrLmBvsq9qs6gauFXrXWDoB4JiRul+yRm36YwV8vac2sClZp7AoNe9BCM+MXJkxCXosSx7xIWOyAKKwI6ux2cLQnSm+PC2GLllKb6ZHWAu+JH1uZiwLNG1T7mjQIAnw6LYq5ISviYfA+ZwTJMJt91lFDhW847vGZoo+CeKlxo3BaK6Hkv+/bcNBCVtbye5Zq6WeHxtLAqb3Yq9GXOVSVf7i4dp4SLE4HWROWqWwCQjLQ5IPb3eDYjAT+SXpxDUKoCKCLHWn8fK40g/m7cQRg3/r6WMeQ6q2nXHVfsnFWffa0muVFjyUXrufMPpYiyIgIvTeHeqnVdXxCPh5GeSz3cpsCvyZx550Pht2OBv1eHubobYOoiZ5Ulx++ExTYE68O0PvcdDPrSo5E6t2aV4ht1ahbDALC46Kt+GNviQ5EPq/1vCjo+4lJXkdEMss4RaCl25KpJRkOrcF2cPV1OquIhJAQLfJhYCt7cY+64gQxWGNX3kydd1GThbA4cX238YJEIwwHdKfsZWsL25ssumlTYmOANyox4uSHW7HuJ+SNeU14i2eQwue4xQtoltD/hIgVfgZh4q6OoxavLj/KHF2R+ckSG94UqicsuQXuwbUfr/Ca7zrmw=='
  github_client_secret: 'AgBwBSfzSovvyzE6SP35yq6CdM8QBnHictZ+mO0lpON1Ec55m8a+yqBYn/H85QWGKtIVvXz9tnj6I0glnkANG9+fD1hXdeHqxWOu8gKLUlAhg0MLXlIsQgy2wPUZqBia2JviT61EIrHjUK55hnjLeJt4sORjYavoS5ZCMeVf4mi9pTW17nuYJPNpoFwwm7vKDrEWLmKKNp+RjAjQ70CGzGpMJ0YinDn4fjGSu9EUE57Y4C1M1EqyciyMdrfZmOt5mL9R5I7QM4qtVWDYeXJIzR3BqNaFyDTcgssv4xYUFNH2m3frHqR7PEc98mnFo97COteKe4aZ/o8xq+FeSq9dYa3wu0rG7h0/x/UzPnRwNvQwhG0LlqlGv+HaTy/4LLm2WBICBE1bBwwyl44+wc4q/P9RI9zaRniLjIXNT3Fs185RGWkApqlcAO3rsNfmSHv4aoZTRhbwaDgU2RE/l5AiI9PJ/j6xduaIangWDJhkkye59VXT2LBjANZr+RC7IyC6VvjlikJ5+xTKTmtb9QugCwwoem8ZD0Y67arfNFs4N3mkLaW9sID2nj6QdbJyQe8tc1ooxEbBmpeIQeyZ5kFWEsuuCYgYwR6VvF7de6n3GpFtIyjsiHVGM6ADuGGJ4QwDO2u9MPJKsup7kBHB9ERFcayZbiVc43vA4yTwz1ENkveXs42BFUe6i+TWWe9eG03qVf6VbOE+q1g9E+NfpHHiPKLUBgBvTY8YCCe7zkLPLjdpHhWhK0hvdrdL'
  grafana_admin_user: 'AgAoZGi1j29AvGg5LDr23Ys8f5MpUPAnG6540kWsFUCuJCRj/uWaBU/JovblNJVp9ewZW6H4vWbpVNm5q3RZ8ZIa346IIpeMy7zSTBVqVibdeBbD0Enrthl3NICAMHlE0ECm65hlaoPw9J1yBhrJuJj30bOTFvV1sd1xZn6Qfj/UZqd4fP9NL7X3GbTytw2T5jeFodcBkprFnhoa9/ZCZyWy4EcV+o5U9bTxblEU7JJZxGyxcXlOP+qtfasl0iI2rxIk4k2me0Edjo3ddDtss+olKebQ58zgdRc2AcLuLihvVUW4U9gG3gY5Y0KCO9ZxANE8ldZJKuNMraDrpPaaE943UBciasiyjavW3HCkVNzAPrJPdtiGvDXnWzORB4ajMN6QLWJNpyxaC8BzMJEKkjn7VMNAM8X4EtnuT3DPFlzHKwwoGJBoHsYRNut36pW4IS7TkaRBLumtqX6Cg6MKi1OWQ+Bh9ZguP6FzFiF3VAI0FvyHWGHZMC8OYTNlGNC9jlFACd1uTtFY2w+h+D0dGBwNF2rnTmDy+sFdkdTypgHGt7iObWJeGogeoIZvtABHgAQNbrGYffy/d5+GJqecB2bDl9rl8BhJ5fwnlo1q0iSovOjEljRGYxhIsRanCTWuloooNlngNiJCE6W/YfJQEAeMq2q5GzSoXRJ4mLf2ZQ0fiZwXPsv8uWnwHTPAVBJASexOTRFORg=='
  grafana_admin_password: 'AgCQnbL+cyoblWnjCChWavuA3Z40V/Xe3p36avRzEuitcxn+6ChEbW9CKe8FDCSeAmi1ZAAAskinByyVXITpOx7ESEYNSAKI/BSISoLrLKRoQhtR7QIGQDdCjrzWnojSNDcRtAKh4e+qVkaV2pxLym8pZtujLxR5afeoSiz/vjTidoX26CXHisLxjjW9rzkPSL3ro9kYMCTeoc7LW3ogCvat4hU43VJfKDCYSMw2dmQj6C9bzaHBWl7znoknwK4x+bSV3FsStmIKFHm/BUGMgecJfjaNWqk+ID0oFVFF/ITq6Hr/k+jM/nzROk3ZcDW3nEZHxOSZ081ZAoPQTbx7alwdx+/t6BlxwdHIrelvdSP3VFjkwfd/GrtMCUiPDu0vrxsBnHlJLMU8tBhi/YDRvpVpSMOPezNBhFrqwO+JpRtJVFMxvXImwsDQGLknNiV8bnKdkiH7d2xpPlEb6a/AFg9T5Hd5Nt/3hvc/3HF9vXkIsziBfx5k56zaief5brf8NoEMjM+CICg+OaFzlXS6q7Vc2UImXG0G+zFlQsZ4bOAEhtXMMdRIR6stjPGFfumjN0G94SZGskU72i2X2kBkXHa7qoJZ84WGF9zEQ9R5KWSuGQrcgrUQSX0zMY+6PmqDhmMLKfGEFrItLZcPjsijB2yNHSiAmCj8wdAj4TzIUNKnMHopisx5UQF57aYFp4w8RZpH419qxZ4fxABANJw='
  webhook_url: 'AgCib3Jp2e+EirngsPV7nlHkaw4wHcQFB46dMTp29sknPQCf+JV+WqHtRm3FtLyg0GaWC4x/RcjuCmmtOz5iZC/BHbHhQTlCMAj7D/pYqcESJln4YvuQoS74MOCiStbQ3FclgdlKlrubK0ghLkrSXW2h3HP9HSVZSH84UQpapC9m8DPwbUtqcTrOW+5ughDidfsM8zIp/+45RFkEE+IoI6j0HIl5Y/xggSTdNcXF1nW9fnGkUDCDsUN8qRBjqwOU38VDtKgMN9/P4EU2F6dh1JtHOkmI4WXuR1DcTk8dWCXwzhcBnokq+AYZtGSzEcLzrO01goveCeijO8NrtNTDeyWO/BF/7Jpi+ugQ4W6kEud/Si2hok6IbEFVuodlw8ZB0+FxZVuXuaqHSWuVKDYRg2tRYW+bWkcQCQLD23Gs83gqOa6qwl8yfQ3CKJk8NwtLAYQ2D+4VOvhxxqkanYt68/A7vER+k9MCWJGDg+vwUTdJatjdlafjCkoTm/5W4hQzUpWTjgQ8Xnup2EKvyAW9iMHMyHMwYI9hD+3GGRrR7iBjLmr53vvzu5kp0TMyPPAiQz+mJqrjx4/iDoC26lB2dgXw2HVfNw5Gol7efTp9PPaCU0xLokf4rYZ8bF6DFp290vDTVqvYe4yrtBDI/3LgaNHTBcCRkQdVfxsiFjQllQsD4RdxNTj8RXb3R5qN1haR6f1TBBSD5Y/UwPIkGRKf4W0cij5VplaahtPnxbF7c5s3WyAxkAMSKs+aQe2mS73wZefbxlabted6F8MFgZMO1vy0bxdUsAwlAwdXfPIBTTFpUJI='

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: service
        relabel_configs:

        # annotation 'prometheus.io/scrape' must be set to 'true'
        - action: keep
          regex: true
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]

        # service cannot be in kube-system or prom namespaces
        - action: drop
          regex: (kube-system|prom)
          source_labels: [__meta_kubernetes_namespace]

        # service port name must end with word 'metrics'
        - action: keep
          regex: .*metrics
          source_labels: [__meta_kubernetes_service_port_name]

        # allow override of http scheme
        - action: replace
          regex: (https?)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          target_label: __scheme__

        # allow override of default /metrics path
        - action: replace
          regex: (.+)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          target_label: __metrics_path__

        # allow override of default port
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          target_label: __address__
        - {action: labelmap, regex: __meta_kubernetes_service_label_(.+)}
        - action: replace
          source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - action: replace
          source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.dev.service.aepps.com"
      pathType: ImplementationSpecific
  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.dev.service.aepps.com
        root_url: https://grafana.dev.service.aepps.com
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.dev.service.aepps.com"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.dev.service.aepps.com"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.dev.service.aepps.com"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.dev.service.aepps.com/health/backend"
    - name: kubernetes
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes Node ready (instance {{ $labels.instance }})
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes memory pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes disk pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfDisk
          expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes out of disk (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfCapacity
          expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes out of capacity (instance {{ $labels.instance }})
            description: "{{ $labels.node }} is out of capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesContainerOomKiller
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes container oom killer (instance {{ $labels.instance }})
            description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"                   
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 90
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 90%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: dev
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
