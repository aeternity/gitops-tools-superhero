encValues:
  github_client_id: "AgA4Gex8tgvZoa1wKAr0hdLd4Hp26JnXvMKOHWEykNTeYu8d/hd7VvPE6aOJEYi1rEqGla9cwR01NNz5tZg111IuF9mh+4PPt2ifOB0ELAzPwEW6P42ndHXVCuDZOZU55iKEDZapVSYpTNvtuw5X7R1VEveTIyXY9nRGzalVpASEO0D1T94X5kLo+soHX4E0RKATSrKTvi7MQ8fbdAiRV2TLz4r/J1yMaPKaFT/iwi0zGs6me5Jklfj3k4LWgyJ/4sTy7gmR72LXBGu82V6FKXSrALTIRW9ti1fH5C/LCsiaXYT/+CfpTynX+dRr0xhuowEUKa99LBO5PDLFBzCmePRaKa4GhfxCUkyXLisfSVHE5BrAIdLGAPj5J26X8BCCI6cHjjdA+SVAdpKZ2FslpPBND+gw7+Hepfx5gfr06VoaxRb2eY3aMn33whEtIeuGRx93M4Fj5FMXk60WpVO+InA7Ppd2JaIssS0i7na0P+ERI5qOMhJaYV+8D8aIsIl2K4Q6SM+YZUUyxDY0XOAPF1K74l1yUpfBlKZS3WrkLzn6KXRcJY70C3XV2OBwr0g340c1bRPcTvqVJe9O9H36t7mmiGhnuL88KwWV4v7NoD44AYaHQJXNOfENf7irinlQYVhyX7lDBDFnZ+nLmOLvWkogSZ13CxgfklD/XPYC9i/mdk7yJOlT2NJYson6bmNhfo+3SEUhssryXxkBtaqMX4xe1n9W4A=="
  github_client_secret: "AgBG7NhMX8AVVRES7BF4pWNfeScraQomO0lD1vqMml6RUu3p7CEalJTWpu9Un8NmfKDip42JcTcvKee/2dICS911tr+XbL9qEEl7ZET95QnkPIBtVkd8Zn3uLciC+WCs2nPQJlMW0V8wzDUtpp5SnsWwiZz/7k7BaXwSmgD6xESc3iM9rTY8iXwRY7nrPfBxo5aJ0sCkzI3L36S1bX0sG7fh5j5BQmz/lZ0xawXuqCUctMjUBwGwoDiBpVsVMR98etNJ9AHBX37wzT9nY9DEqTpIPt2HW5FYpcA5E46AW8oZbg7PEk0gwZdMmEASltBFEa+n2eibWp7jAl7FsT8AqEA5t1cEfRzpsJTsOVElNZYf0STGF4O0MI4I0Ue0Lml9JEhvTgjPNiDrcjeYEJnFwKjwua/G81RRbibAF2GWJA85wj70iGXQaOk5loXtnXslXplPGPczDFMEQtqxDFmmNjDqAxtUHo5YP2pbyVcdbLdzYcaukYFho4Ayhhd7tLWgFApzp0JNZSa34P5wqHE4F4avvM0RYclDiKjuuSpcF8sLTJ+8pQww3d/ee0rvXPErvk9J+OEVtVFgnkQib3m2Yq3M5FhEzRCJbuGsMKI5tv2M+PNZiB4o3mvzGekZHfoXKKbQDnRB9L6nhh8Kwem1FnoSmP3Fs/4SpfC/kCMKy365rfLXaaMswh5UAesapk2F3dSGdbPsoFDxGZCjSbFhKr+okIagYqocUEoWPA7DqjHlAxN8GAqJUfKe"
  grafana_admin_user: "AgCYpWz20T4DAtQQi+8gcuXbIBtsSwekPk5rHZbQXrhrBdRG8SUzZLX1fohlAwuIbwoC1tbju5JErGr/4kHs3pCqFxO/WQUrBntbVKhKYrB8m5rmMspTuql2bsTasO5oZUltymBW0q7X4WoZrpDz7DZ3CzoBBs7hXo9SnPkGTsCqlY/8nU69ImjDp6ECBpSgn5gibPT+Lm81NMW3fmdd0IqULRQE9f5hZLImfuwCU7fxcN8S2g2xjy9LMm6Gw3MCKGaRBdDpXB3X7AYkOm0xw71WIkCGna9Baf+NEjBuYFe4sVKYmAtuUNvGfB67h/u3JbxSSlcm3BkZViZfDDEQS+c0EduCPpShEbL3jpqIGTReo2+omWq9PdE6BwxP/SSf+UiCF15Z5sunxofKTzSu+z2uhdrIjeKZGqdU9ls+3InAKLwKdPXK8ip6XoF1gHPIAyw+8iu+skhbe6HKBzA2LattkmZ887GRckLTM21eZ8szE5N+9Ye7ydbrsSJCZeh+YlPz0k1oM7vEaoYSqsgCZl4RAduR62d4ehsWGRRj+Bi/IXQbm749Lk9UtdUst+ghvxjd2AufyM08cvNO2u+087Qq8m0KEPmNNIAYSdEgVvXIdzlWefAX2d1Cdm8Co76LH9fcNu7YfgfCIKUOlWMQ2LtdpfhQ4tB6Tce0ikE2oI81qPwk50jeF8KTHrDzLMV0e7obiD5asw=="
  grafana_admin_password: "AgC266zwSmFmlVpyGVc8VvApyWOk/sMbXZWzcxpdXkjmdRre+srIGKUAaHQFUOo50rLVvLCjU1raVJ/8ZmyHTR8u4EkIkaUhO2qor66QP8nutfMrLOv6FQ9UQcqImJYvk7ZYh7r8VGOCc8rhg49FrfsB7bYIJtlsBkfml2RElg/5JqXpv2JYDzqgcKk6Xylq5rvycLENLM+Zvf/lpNX/QgD/OJzP1ne0Aezhp+XC7ZwGhbyoNRKurzAD3KTw2t/VsnPLQAnhPXVU6eZV+eXH/uUBS187CHcGmzFIRuBTN/lzcC9ZHu3C5K0xM1BECOBDXLvgQaciXpF6ZE3YdwvF68kt7EXWKzgJXNWX9z3lqdwwZo2MBYTAUefSW6IJj/1UX6fLKUTUa1FNSaGbgxwbny09C+ErX3hUFIVT1s8+QhKViJ5k0dyqqOzp7+19pOfdhs5NfT9Wr6mtYZ/+C0GkEfy/ThVaBq7CXXd/QnQnhNIig3b7MhiYcIz9soJHCxC8v5iaZ0wwcg0gH8BAzwAbZbYx6Xsz+PAhYGe5Y8iRcnH357wn5IHJxOpDqqdjGVfHl0Aix//2HS4EDIvqyv2cGcsA6e3kkkthaGPsVqTZCTcfyk19sgKb6JxR3LlStX42hgOR+pSo9OMjyiiLbRkh942xgQFvkP/t44mhfigVbbDCknkMndSSnPiIXhQKfb3HXM1aEQeBLlYVNtDKh0E="

alertmanager:
  slackEnabled: false

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: service
        relabel_configs:

        # annotation 'prometheus.io/scrape' must be set to 'true'
        - action: keep
          regex: true
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]

        # service cannot be in kube-system or prom namespaces
        - action: drop
          regex: (kube-system|prom)
          source_labels: [__meta_kubernetes_namespace]

        # service port name must end with word 'metrics'
        - action: keep
          regex: .*metrics
          source_labels: [__meta_kubernetes_service_port_name]

        # allow override of http scheme
        - action: replace
          regex: (https?)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          target_label: __scheme__

        # allow override of default /metrics path
        - action: replace
          regex: (.+)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          target_label: __metrics_path__

        # allow override of default port
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          target_label: __address__
        - {action: labelmap, regex: __meta_kubernetes_service_label_(.+)}
        - action: replace
          source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - action: replace
          source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.dev.service.aepps.com"
      pathType: ImplementationSpecific
  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.dev.service.aepps.com
        root_url: https://grafana.dev.service.aepps.com
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.dev.service.aepps.com"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.dev.service.aepps.com"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.dev.service.aepps.com"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.dev.service.aepps.com/health/backend"
    - name: kubernetes
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes Node ready (instance {{ $labels.instance }})
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes memory pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes disk pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfDisk
          expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes out of disk (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfCapacity
          expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes out of capacity (instance {{ $labels.instance }})
            description: "{{ $labels.node }} is out of capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesContainerOomKiller
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes container oom killer (instance {{ $labels.instance }})
            description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"                   
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 90
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 90%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: dev
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
