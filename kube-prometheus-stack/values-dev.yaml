encValues:
  github_client_id: 'AgCoTlMW2dZ2uZ0X73x6l+QTFgUS1bO8x7V92yC/nH6TVwGKD8RVrGJNLCS8Y51Ch0U155gZhIxjJiHlezX6u5yr1QTdb7jezoWX0M3xC+UozNkzWCGr5/kVZh5rZfHqNxmAkbrMXoEOglThH7xn5dcwZ0ijWDC+2S6KoRD9cAxU1K4iLnnSk6JqOOQ6uTpd6vTmt99m7OM7BhR0xQFquFbl2+IC8sN2hQedlFTcfaRofltAvjiHgk7sJ88B0dRnrrBiULeSmWbRiAPw/mBo65Ar+YeHaLBuwzD/D8MxUWWaeFgTNctOM5zMhDBl26CfHO0fHuB3MiILsfQLx5/o7eI3kfzSGCDZvE+87qQQu9jJaPMJsaiQExQibr8AHnyLxy0eibLs52OuDV250PmT3N1M8+xqdF40ZGHwjgVIVXePo44f7k05Mf3awABkv+mDyZftO0Wf2wPc6ARtje9T7RT1fUn/g+yrDYjWElwVpt4e1jf4ZSys/5l2vPoqK5kn+AMFzLlEvAGOJi4PKgY+WmLo83jW2Wh704ZpE4YuiqOxXUcdvT6s2T3nCq44iBe7qICZUq47pldIrxoznjIRqYOzsBKCdkH/GtA9+aPZfAKsOihlY3ZOwg6zahui+JWYgmCt+sBeu8GxUY0h2WFjJUXWgFKJKtgDpJI/wQuYxCEeAYxv96Wn/01Px4PxeBdQ4zbjq+DabkofDWMaC0RM9eodnJaWxQ=='
  github_client_secret: 'AgBctNdNq39NN30zx6hOSbUxY0UehsZKdvZrWhxR/JBFWZr0HpvjIqhd2dnKowBK8MzhLUFM9hKPZie9z9/mz2WlkaWJe0+EzWvSL8kfjVzmss1bXvVzTH1FRI9hhv0B/TYMBEXijBVNxzZK7eaXA4RkLQFHQX+74btCZJMLGaatI5BdxpEgxsRnB4g/myRmnE/kH71BmNQdzDiaioYg+ESA5zCLLjaJn3VgoYgncrZzJlMOWBjGE2GeYUrd53XErsPsXNkzJobUt77zTdbc3GR8AL7qsZWg0KvJ8f5qKQlgZXQS6mTMZwAXEj/1vZfMQvropI8PkhRWEzr2DMlgJ5xuKHJp1ApGvcR3xSLM/RZ5bAomNwn+vXujCgPYPfczZKZ90njfejw2FaXs8gsdhqKjZ4o7vmpPj3wSVsV8jbnG7lMh8BgWau5SYFIsPppGU3iu6CiOSpnT7FIdZ5ovRIVk+vXvMb/YzT2i2KOhC3aacQTnbPc3XwJmLy75D8lXmuH4LOp3zDX+FXlsMiu8BlunZ0a12HgH4guVoCV5e2MBzSRhkiuiQuTpXNHO63qxCcxT4pFA23kpUdTXNvi2tI+B3VGOJlzcZcX6uPaHKnqV2RjIrFl80sPMDV6gJHccwTdqtIxkbE6rRsg8Cq5IejhN1aBPUjbVjLlTUcZKr8a8GqAtbWxq2WV9EVdQ/inH1SNd59D8b5oxdto5RLhmCv1GfvHu2iOQUaAni6vFgXnZoiQCMmFpHJ4c'
  grafana_admin_user: 'AgBmL48cM8tgnv3EGBA5e1EALRRHvcgPWIhLBkcd1n4DJaxqKx9Fxnz+BWfPnzIyHT4zf84mnK/np6d2ZsIym0YzUxCGNPcZE25VpA4OD5q6pqibhNe4A3UbtrXvib8H8pEb/rqu9osxtuP7aujFIf0Niy7dNLUHutkak8UYa/lkYCgjL18xDin+gbzVrxrAEIewE7WovcOEIC8y2zsINJgLhd/RRQKBv/McyatrgEOiwEgUi4sg0jgZCeog9UESc24LYPq5cbVaIzCcoyVFUa1u4qfTL3x2mmuZAdrRTixD5VIj09M098/ZGVjOO16ufLHfUsDqKuv9F1YB0XMhtOIJ8ykTPCYkrqrov0c+Zj4JKZuH7KGRNRG4HOy5hdCSplrCAu0jwH3IAJEnyvZEHBXPSvS585AMxXDLXd0Y12WyPYyrrlP3WZSBJi6GDmSwd1xtW9lxv4oXD1nLpUt+zOl0MkMA3kZcUXTtbmsuPph3FRbL2PaZfNQVxb9EA68XHqiQRR2GnIVog75Qp/NePIkLvCfehazt5tXsZNAxmhkFb0jfBq8dlcI2kt9asULo2vIsK8w66g3zNG/034CcPjfu6hqJ3FxRKnNqDfIuX3WyFTVqMEymV6wvndPENTAIsuOqYbzF1uqGiAfCNy8CowgeWRosqvgrcy9Qz/TcGfR7egmT4eMTcsLvGbWu3Xjh8Gr3cFPgoA=='
  grafana_admin_password: 'AgBdDEMCpURS/GnOwzl3UYn/DKPcXY9SD5qH8opaEhZycjQye6rEqeaDAJwSCJIITMx1gmpOtl3Ob4RNaUl3qZDr2dbAt0h93aS03w6/b9jTpGcvkUlHsKolremLudFiDrUk8TE7V9Y4ZXiXO2bWwJ48sF8K1z6YU/QTkx1CBCDbkgFlDVGg7TwU0EM2dVkCFzBgxIT35Q9AYGvVdHsuviALe5O8tuBjFHY4fW75ASmmUkW2+Z5EaQS3jEEktXmRbjZdSocD/IdaXIPDQ8Dv+ygDYSbHFAnjEMNfs1jNSo8UgVV3Z+zB4vneeTAT6XkaSqZ62d5XYgcJXG4TKSY9udirhurnEWeUbaySuywBJ2Q0dh/87X7avuxN4DD8GrpXOx4yvKSNAfFf0NRXyP3biKjqEr8oH6Ai2nk6RmR0EXzRR/z3HXuo+r46E5FZcESpP5D6fwTw2m5wEAY3hO8XelCruXR4Sz79pWFhLwjXWeJoKeNX38z4BQdqWk3UYQntx3adVDr1DjzE/b/EicDFYX7OzhoBaCEQdm02OSNHZs6c3HqcKaR1xnbinxRH2uH1kC779phKSuNVxtzPUmYARvLCeAZRKZaOTaxW0m6/gv4pz8ZMF9JzNqm+8qYFZUpY9XeVQ85EN09qOFATF9Ld4gXJyyh3C0oiP6Pua3oPOQJ+TjNmU1MxBezaAuveb+eDSeYbYrkDFqRePZLPq1s='

alertmanager:
  slackEnabled: false

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: service
        relabel_configs:

        # annotation 'prometheus.io/scrape' must be set to 'true'
        - action: keep
          regex: true
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]

        # service cannot be in kube-system or prom namespaces
        - action: drop
          regex: (kube-system|prom)
          source_labels: [__meta_kubernetes_namespace]

        # service port name must end with word 'metrics'
        - action: keep
          regex: .*metrics
          source_labels: [__meta_kubernetes_service_port_name]

        # allow override of http scheme
        - action: replace
          regex: (https?)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          target_label: __scheme__

        # allow override of default /metrics path
        - action: replace
          regex: (.+)
          source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          target_label: __metrics_path__

        # allow override of default port
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          target_label: __address__
        - {action: labelmap, regex: __meta_kubernetes_service_label_(.+)}
        - action: replace
          source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - action: replace
          source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.dev.service.aepps.com"
      pathType: ImplementationSpecific
  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.dev.service.aepps.com
        root_url: https://grafana.dev.service.aepps.com
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.dev.service.aepps.com"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.dev.service.aepps.com"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.dev.service.aepps.com"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.dev.service.aepps.com/health/backend"
    - name: kubernetes
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes Node ready (instance {{ $labels.instance }})
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes memory pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes disk pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfDisk
          expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes out of disk (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfCapacity
          expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes out of capacity (instance {{ $labels.instance }})
            description: "{{ $labels.node }} is out of capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesContainerOomKiller
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes container oom killer (instance {{ $labels.instance }})
            description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"                   
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 90
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 90%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: dev
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: dev
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
