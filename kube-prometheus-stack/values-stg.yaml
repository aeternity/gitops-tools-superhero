encValues:
  github_client_id: 'AgC9XsDJQtIGBL6bI7uOqiNFYutMR+/rjD7s7CE1qUF4Ifa8FDwlX/sxH3s5fCO/sV4f2XeEe1VQ40D8v45huOb0SxCKd+t66OA6V72iwQGPCTmVTzxhKgDq8vOXZ4PuRKL4WItk8FYaX7cfAMoxiuPmgHbXPxd0akaaytDn4wiSEhAc00ErYUsS2GfzssZvtANqrFP9gtydn9XyzBTyuj6lAbahWDpE6LkstZ7TVaTgTp8yt/xYLM63i0uaGeArlNCPIbDgsPN0PDu3dmWU9A3y9Q+2cdjfeALU2EwKsevy5VUITaJqrBU+KvgsXXyuqnXmJBFTe3Bve165Ouinw3uojUm8HHTPIrS07IvZ5YTb9QTTtnO+jfCCjiAr9Lhp2T3Uy++NJ1X4uvLdyMt72fdKHyo8la/1KbZq7yrTpKaxUYS7yEdYVTgKKopv7Z9t/ADnEZjNBV+EixEoZIn41Is9SKYmPoGOTBag/wVfK41tHwe5V4z/eRm9gidiK4P27X1oiDFFhwApiuRuxjrKvIL4lUGVwZDgIROW+vqkHJkIeXXS/iV6bigd/UsItMm3ITmUZRXedx+H46ZNolr78PpAEo63p/N3olyoVxxAy8Um622ZY6ensVioKMvk7crazcUlJJ7lNgbZNoBfihTtJmGPD4qNlLX1F6EUvYUHds41Wvcg2br8gjRTsFTFk2tS3OIXDmordRq0N6oyEBdcn4gRGdPnaQ=='
  github_client_secret: 'AgCQUg5PF7lNYn9nYbSGRrDqp0HXr1ccstj9VK8Ac+pwIh3IpO3uV62BNU4BjfM+R0o0LdLENGoGNFxIe5m7udg3zb5aeMzMkdsG0SkesTbtNzbt05RBeDOnQYiDOZu9Mr4cP9mn1zPVXIMH2ZJvL6f1IbqcC25te5cvAS6e6jcpUbnDtGdMJI7jLnT7FedetHMM07pQ03yrGfuoS8BT3GR2ARILSM9mON/imO903BB2foGSMBGmqORCsP+DyHoZDaS5wiSSFBVw2fRE3NtEtsqY8+NUC52TZ35zvI/NwZKgcGRk5VJA6DG46JF1uZMU6ZhwnbVftMAjB5tex89WOC3iyvs+UMEusMw/XekG8wsvTyp2A+MxlLgE1rS42n67y6Q56ib95Z4bM/0hSz2AQr6M8Y6YuMod+6VIPA9ksHSbWP60R/AH+ybi6cRHhRCvUZSbVWfBEKzWWdux+01VA7nWGS+q8vXjbrdtQWz/d6WDrBYh/tx0HQ46EmnXIzYui2R2Q9y39fA18YCRH6N0BeZXY+3e4RuBGDrYgxQbG2S964iOLO+G9P/h+ZFprJYnCOiW6YJhnrqSS3IDEE7U5ved+wTT3+TtzAi1xmxiIGAYSz0vWaFaAPLX+bco44NryswzwaXKnRcm1ZEeuB7l6XSqIJRry582Fsjs8Q2Sj1PvRint1EvKtk+W1qkQm/A7hbfpklF5vdE6UyDVk6hX/EfegD8nEN0zzYPMKcyqizxdCNZmQwbWh4n9'
  grafana_admin_user: 'AgAi6mi2eaO5W13nymD7/OP8xeMeCw3Vl/TDgDbeumeH4VvQTYaginZdmOf7yLBv1bInab+mmJgDglRFnu9BXv6PWscYvwrwaJx4gFK1uFNOw6f6KlB3s+hsZQw53A7GgCtxZnCQlbyFi1ie7X5opY8dJmQl13354e+iREgt30XnQhS/NYH/phya5Sl+o6FbJhrblNFGMZWqxciS3B0n2sXgz+o5ffBhZ+y9+LuclQwD0Nh9krqeURh8sUyJh2sgQDmedWO3E5IugC/fK5b6cIV4H6Uyy99asGep/XfTMqpz5iSGNgY1flGVwD5ATlCzuTQJWYogzULA9XPKNH/w4yF+coN8TVSPkZkRS+qVvxF782mhn2qgXQuNg9Tx7eqyPIFs6nlcLX0NRM/oxBGOWzT8PHne3eis6P2s3bv4lvJUZv22TcYPsVM13izZSVi4+RLf4IIODqfN8WFU74yJTvl9s5oQTKT38hFELPK1AweV1ZIpA8a7pxm8u06FJUcSCRdlM+FAoPj4kA9F/bQXPW+pr5HMPwA1GHrkInpexNf5MioVjKYZTJJi6uhU6VkrPsikACkCN//6RU3mMP4fURfbhRoe0DaMDeklEZ05Vnhc72VObld7h38VPYXAPTlRwRUPsPSlmQgoI6o6v+cfvg4yCkFIU4Aylrst7cVEanfdzQ2w7S/prutRqekTAPXsbk2WjRFJgw=='
  grafana_admin_password: 'AgAeYIP10wjj1UOIVnVrBfXK8VlHcmQX+/jTJB53Y30Xs6Wlyd9VhSmV8v5WK0c83LTxIqlX8p2yi0xvixwiDAMvLo2JsE+GOzAatDnkim94+yB9cIabZUd5WFIMiKzJMzKpzE7Ik448V1B/rJqDbbZWHgHJ916j+9DWkmsEOVhVLvhmjQzZyyFhXeFc5hfc/ujraKuefE34/STpgf2aw+p3SyPZTf+vBMZCVT2rOuY9r0k4fRHaBNhS+qEGTCrQqiNlj82XmVhEY3XJfo3EitciC6q5qz4B18AvMtD7D4zBdVkvJJ3FXSmDYUUgvamI42oQOGb8L0yV/bCsqi8D+xztTs0Gn3ut7BMcJo0vfS2ETX867bWciCdwVD+Dd++/EtdDtxPywNOLsiOi+Ivxa0A9kBWcIKKrA4MF+OOmZZkuVKw5S7c8p8gMPG2qf2/Nv9uq7sz+P/20OtXy+hhvzqIbBLRORqSb3dFvRGgHXrgeV/ROcbO8WXjus0Y5cr33FyM1J5b/ueUMKFZqlgilI2koOKVc1dri4f599RwDeE/4wicXF42ImaoFSmcOOj0pkECiUzOqGyrBivMBoFUYVdRZFM95x9PUvvwY9NASNNvNEEetHtVYejYw/0w4l+FP3ABIgEbcyrLkPZr5488Rgq/Rnkz+OiSn0q9kmHFtCWMfZQ2nqFRiVOWnOo2S9AhkuGzvdR8tRrsT5Kbv0K4s'
  webhook_url: 'AgAaIfoSOku22wggS+PYAqY1rVa4t7r4vhdWLUXSB0Og0GVYM3gXBzGewFLUBVz0Vx7/VTYiXW+Q8gEDieICJHkist5nBf0MC55ANq81Rk8/I/hHCpA+ga72il1PVfxSCMw+SPjdx/jtIXbSQcPFf5AyDQzXs6G448R2jpxq4XMqcNv21E/+o4MlMoDRpQsjen00ni2ujcJ3xtNDhBbVlLt5sNQ8d0N6OEcUndRafnZ17NwX1+LM/MosIL4PYLa5ZJjVhKmVH5d+JrXDJ+Mw/QxvKbxJjENDCa9q0b49AUWiAQFnawesgw2uzCQXOp2rgRUGOaicwFf8GCyxBRqoD9aJpTBY4YWxxRNlxs8YAx7TuCRMQMxpUuvZKMqaYC59pYwFSwZZyPUeX/+y+IMNn1pWNmusVO+ugAUm3325HRTClpmMvmGESqrMaw4JJfTFfFsGI8DrgW+B/Se0Sb8tOYaUxPSex5Ahvhc5G4nQrlOCfiiUBWdhb6QvE/AViKlEoLRAJGSAR6D3CmyH096cxm4kShB5gY/pBhjgkotCEP171eBQyuYKA9N25Y/SqN18S6JjbCx2C1xygjh6m+F7qINdF2V6b+7mOBw1K6BbMxGfAEBZiB4PmoR8dFHtYGPx9xT4SPSXpav1xO+w5+DvJUPeu6bCs+v5XVbSrm+ELfBVElAmrpgbmBlhtDp9AsHM13l4HdBiENc52WTaK5CZtRNRCdeTYZ60tkkyVELZ7k/FKybEBbP185IBaL0MYfHQ6sTREr5unlAgaZFs3jjRcuiAbt2ysFfh6Tn2raKQOAORBrM='

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
        - job_name: "blackbox-kubernetes-ingresses"
          metrics_path: /probe
          params:
            module: [http_2xx, http_backend]
          kubernetes_sd_configs:
          - role: ingress
          relabel_configs:
          # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
          #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
          #    action: keep
          #    regex: true
            - source_labels:
                [
                  __meta_kubernetes_ingress_scheme,
                  __address__,
                  __meta_kubernetes_ingress_path,
                ]
              regex: (.+);(.+);(.+)
              replacement: ${1}://${2}${3}
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox-prometheus-blackbox-exporter.monitoring.svc.cluster.local:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_ingress_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_ingress_name]
              target_label: ingress_name
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.stg.superk8s.de"
      pathType: ImplementationSpecific

  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.stg.superk8s.de
        root_url: https://grafana.stg.superk8s.de
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.stg.superk8s.de"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.stg.superk8s.de"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.stg.superk8s.de"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.stg.superk8s.de/health/backend"
    - name: kubernetes
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes Node ready (instance {{ $labels.instance }})
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes memory pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes disk pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfDisk
          expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes out of disk (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfCapacity
          expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes out of capacity (instance {{ $labels.instance }})
            description: "{{ $labels.node }} is out of capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesContainerOomKiller
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes container oom killer (instance {{ $labels.instance }})
            description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"                   
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 90
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 90%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: stg
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
