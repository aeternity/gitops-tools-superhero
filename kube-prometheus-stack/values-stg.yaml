encValues:
  github_client_id: 'AgC/Wtt+ykU42JF3f7NfwCz6raC4IWXS+dQNjA/HpuQBJzzHdKWoLEfqNz6h5QgdPou13f6TxCuQM+C3zrU5JMuLFg0qZ2zJARn5iujBdbrdrXuz4nDFR+EmqHLiK8bsCcxb/lCkBUgOuQ+j82mnZQzutc+votHogiYKSgTn0Zp+5gFHjF4XVbXkXsy9AifsYnSyFnK33MuGmWPQtK7QbzqzSH5PrqF9QypcPnPXTTXXUttEuCRz9h6lmeMoZ/Y/DAPLR9RAXN5OLUo5r/J4tAx1+Q4lgLzvSuBPP3DwKZc3htPb9uCqD/hrha3wIyL5IubB/kWwSO8HfOcElH6o0J7tcpCZZySh0KMD8wHD7WiJUQIRpWwdOgGGWVB6B4Hpbo2EceQnLktmUqnDZSnaFoJmAdR87si+62uphLJ2bD5MSxIpXiwEjwYoX7SPWVRLGCU2jsYCAOIEZTQwVmwccoZj8u4d1lJzWgK6xJOcJ7AaZhEt+GcB06wj3O9eOtVDCqVMH9bIDa5ZmkJ4ImiDkUn2UHirudgY2pBed6pVmZQrb2xVpacOoWSgDikEYkAJ/1mWjAZwvojVhaVBdGBzLBwnD/Jci9ivTmImCh5lZGR/QCF3hgqKLVRomSZhqm283oGjRo5kPiGAptUd5E1D1sJgxk85IpGFCSDJ/OL+hc9iPjcXCokoUh1h84B/z7/pUDSKikW9Z0k+pg9OPVmodvD6KcKOOQ=='
  github_client_secret: 'AgBVhFjhpPYXfCdz2SbKswelYuj1Ddu2zDkQPW6fmYgoHaFoPjh6oyJa0gQKgf9STinz2hm7WwHKuNGNOYtPDlFCORBpgyQ896P1zniZTw36UMxr2ZcvL4nA/B6uo53BJibdVPNz3tap/SBPvktGX0ThyL+Xg+7izcmUVX/bHqnrEC/oEpIvfGOWNLrJFRhavHivXoFGBsMhiC3azMGKcq17QG9Yj8H/loQtweGZ0DVa4hfTlAj9wuvdCHIW6NMcA9OjzKDAL72F5N42Bd8VsBFC01Be61de3o33XUM+VtNL1m043MjHSt+k/rQBfaUC7+dU2FIHeQOfH8OW5YSo50w+8RX55CCvnMUUGtUCHrY/EW3Pc9w/xk80gbbrNjwb7KR8DrXFxl3TfoAczNXbW1WapcHxIS5h8UEMofEUVqxA1tZZy7Xidz75oT+KxS408TLKos28GKfvgC1XQIW94fWqxK5wNVTvxGxo+ZWhiYvh3DXCZ4eoRZ4ZrIVcjIXylc2+t5ycaXTnnLdRJhddA5jfVaMHjC6lSlbFhVk7GE1526G3gWVIkO64dvgGkRBFIfRGo/OKf0Qr3pHsH5/gvuDovkrYKUtvqqz0v/S2uXz5G1uAmiCskaslxg8ySbZimRt3pYXmuhkhK2cA/wC54dxAIyGyPdvAFcvRk8WGxbYZqBkd1oqBb8A5MilTzaFXr8PxTjmLV3TUsYGLvhT2KmR7X9b/4bsz+V0eImPOlWFZx23MS6mcjBmD'
  grafana_admin_user: 'AgCOCIkSPkE99VzwT5cnteNHP4qzqwftb/ZOJx2HappR0/nrU18AI9AHLjux/9LHklBWUNGeDFtcpNEKuBfJNo//9FVTl1COAxaJXoJzr9Hv5ql9/E1mIS+CunOsfYGDX9j5XpR65toLUk+x2ea4RDurfuIF1d/dwN4Zplm0JSweTzQgQ3g58AdS6TEj/K9e2IlBb2rHfqP9tow6I/gyBhVYdnw9ktqhzf61y9nDrSsDMLRXgE6j34qKCgJzuX6YFVGYg7T8egvte1TYOrctdpX3FVkxB2oPezDcRm5Hd6fR5eeuNRuso3ImtAMRwH/LKRlEtBaovc7cgQIanZNenVT+X9/D4kJ1Ggbb7wt4x9oGERYvGCMvSTcSHTNxaycwmD3WQJ/6n9OxrovahG3JB3wrz+hQ4hK/+LPWutntewhukJfv42bVov+1AM8PYIBXDF9EJp/cyS04gNSgk8Lu9d0NgCr3QZdC8ZgMKx95kzvDtC2lVoOpcYJzCrwYN1KZZef7GMYT3ajr7XWbrEAjzX3CR5VzN7FXMZis85ojNJFP+EdxWFPbSwuR5SmhoAUbYdAgKM9y50RHGWQ27PPUU4xVExOMQHPgifyMAkApBdr31mt3zLLqm7xIum5DNJmxwwc0FpNZjrhHBvXOTzGudcnvUC4r7eZ3S7SZakVxH2wgtFKSdp1d4ueX705oAds7VcxghzmX3w=='
  grafana_admin_password: 'AgBAhK4tG87TO09Kc5pdJPGxnygnd4GolAD1wp6vAC6IUyZ4ThyWl0LgVoa9SPAdC0BUZa4NBvbUUlw5Vs+d1KDOmR2x+9H5uCLkRXaSvRj/i6JoAENUY+p3Ehpb1nrDbVe4CA2TI2gwWt16NHGhDJAqfCSGLhNbFE/4JU6yxdDSegTf5x9B70+1u9MW8hRx8cPaw/zAuYo7iP78dZJi4IdeaCfwnEBRn53JgiYFQAVRRiQgIA8a+sfiICgs/vG1Hfzj9dEmePKkimjojz3msQMSIvgiNVKDUTZNWlONuseavA190y7Mr3gbOWonMsrOn6pecWegLjwOr0QlZJ7y5P9wwseReNINr2n57Z3ixQkxQS+YnjML5UgigT3ACEdChh1cUSFkjftAOT7EA/19+voeBc47fjJGOD2tNQiLwBcR3emMR85m1Ptg2eKFF/5X8BRe5iB3zKlOSRRft9XL2yzfgA7UKoM/yfo9zb/zK/2DYiiAdZO5xSs4P5UV2DAj+Y+OeHn9l7VXq2v9yVvnILZ1fKKR9uhrz6dVoBp1motS1QFdduDU01bwG7pLdOAhcAgN6tSdMds40kQp8YIKhz1sng4PYhwf2537k/Z9SSPDBqyd8WoU0vYxpqHRxYMaKc0ERKLnX9gDj/ankxDQWAL4OE3pgRUvxk5RAduOLzi4842EVBOLFR+ClaydkoM4QBX0qkz0QTYg9Jr84Ow'
  webhook_url: 'AgAkeot0hm3rZffrhWecdkxbGnhg27aznqsDorf5pO9VHRBZxJZb7S/ZeP9iQkZD/emQ/urXZGrQbDWljRwETTvJ9Gw7ClykjRKocVZtAxfWNyK8NqTno8ycJarho3ppI7mJTox591KsQF1LdcMTghNiqnWAskft67+rJLqeJh4qNoYSYP5KgCOa5ovzlxniRVNyf5rnZpDXeoPpD1PBOcjNcxxeD+k1nSYBRe7nZBctn+xx7dGmAY+033CcOoLAGyAiY0QXTOTD70tTDfQQOLFnNGdu5YlZHvUpFY35saLo299ZRKnA/C/rgFXD/mpJOUbm89sfolb2DeJJNCHlj9uTOVOe5PMgCC3RaYoqvgLTNPGIXkQCPw0bn5Ltl51ezUu14IKQrF6f29b2dh0jeY0vx7NuWeaA0Z3e/W+LZMcxYYuXyIIoxlD44Aoju6t6HOTxJibZvWRoAIJxTEur+aW60HCyvMPLm1fE4kK1i9A45gSGZpxPFcJbEvCE+TLmOnvbLegzyuEzO5WBAkxlnx/33eht60PTz54jfyKv6xabOSgd6YfdNswJC7TYhtStLxpE7iAZ1xcE18oTTXMd2PkU2ga0TA1yLggZ/1yBjZqMgOFWVhGnLWZHjziVREtxLhuK0S6wE6H1Dj4T6i/qsJHdAXAqs7iq6KYOwG52ZbHOtNJDtlhTBCuXk1E3EwygSwxl6/a5cjnoa5HQ4Om+jTHmsiZvaK+6AOuWzmbewKNl9wz8ANyUlKXsFu+vf7HN6pEoDbbbGnCj1JWkeYicUKf3XeCRf7ZBeZShftWrnMfRE5g='

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "prometheus.stg.superk8s.de"
      pathType: ImplementationSpecific

  grafana:
    admin:
      existingSecret: kube-prometheus-stack-secret
      userKey: grafana_admin_user
      passwordKey: grafana_admin_password
    sidecar:
      dashboards:
        enabled: true
        folderAnnotation: grafana-dashboard-dir
    grafana.ini:
      server:
        domain: grafana.stg.superk8s.de
        root_url: https://grafana.stg.superk8s.de
      plugins:
        enable_alpha: true
      auth.github:
        enabled: true
        client_id: $__file{/etc/secrets/github_client_id}
        client_secret: $__file{/etc/secrets/github_client_secret}
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
        allow_sign_up: true
        allowed_organizations: aeternity
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "grafana.stg.superk8s.de"
      pathType: ImplementationSpecific
    plugins:
      - grafana-piechart-panel
    dashboardProviders:
     dashboardproviders.yaml:
       apiVersion: 1
       providers:
       - name: 'tools'
         orgId: 1
         folder: 'Tools'
         type: file
         disableDeletion: true
         editable: true
         options:
           path: /var/lib/grafana/dashboards/tools
    dashboards:
      tools:
        traefik2:
          gnetId: 11462
          revision: 1
          datasource: Prometheus
        argocd:
          gnetId: 14584
          revision: 1
          datasource: Prometheus
    extraSecretMounts:
    - name: secrets-mount
      secretName: kube-prometheus-stack-secret
      defaultMode: 0440
      mountPath: /etc/secrets
      readOnly: true

  alertmanager:
    alertmanagerSpec:
      externalUrl: "https://alertmanager.stg.superk8s.de"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
      hosts:
        - "alertmanager.stg.superk8s.de"
      pathType: ImplementationSpecific
    config:
      templates:
        - '/etc/alertmanager/config/*.tmpl'
    templateFiles:
      slack.tmpl: |-
           {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}        
           {{ define "slack.ae.text" }}
           {{- $root := . -}}
           {{ range .Alerts }}
             *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
             *Cluster:* {{ template "cluster" $root }}
             *Description:* {{ .Annotations.description }}
             *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
             *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
             *Details:*
               {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
               {{ end }}
           {{ end }}
           {{ end }}
           {{ define "slack.ae.title" -}}
              [{{ .Status | toUpper -}}
              {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
              ] {{ .CommonLabels.alertname }}
            {{- end }}
  defaultRules:
    rules:
      kubeScheduler: false

  additionalPrometheusRulesMap:
  - name: blackbox
    groups:
    - name: blackbox
      rules:
        - alert: BlackboxProbeHttpFailure
          expr: probe_http_status_code <= 199 OR probe_http_status_code >= 400
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Probe failed\n STATUS_CODE = {{ $value }})"
        - alert: BlackboxProbeBackend
          expr: probe_failed_due_to_regex{target="superhero-backend"} > 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Probe failed (URL: {{ $labels.instance }})"
            description: "Please check status on the following link: https://superhero-backend.stg.superk8s.de/health/backend"
    - name: kubernetes
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes Node ready (instance {{ $labels.instance }})
            description: "Node {{ $labels.node }} has been unready for a long time\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesMemoryPressure
          expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes memory pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has MemoryPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesDiskPressure
          expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes disk pressure (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has DiskPressure condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfDisk
          expr: kube_node_status_condition{condition="OutOfDisk",status="true"} == 1
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: Kubernetes out of disk (instance {{ $labels.instance }})
            description: "{{ $labels.node }} has OutOfDisk condition\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesOutOfCapacity
          expr: sum by (node) ((kube_pod_status_phase{phase="Running"} == 1) + on(uid) group_left(node) (0 * kube_pod_info{pod_template_hash=""})) / sum by (node) (kube_node_status_allocatable{resource="pods"}) * 100 > 90
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes out of capacity (instance {{ $labels.instance }})
            description: "{{ $labels.node }} is out of capacity\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: KubernetesContainerOomKiller
          expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Kubernetes container oom killer (instance {{ $labels.instance }})
            description: "Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"                   
    - name: pods
      rules:
        - alert: ContainerCpuUsage
          expr: (sum(rate(container_cpu_usage_seconds_total{name!=""}[5m])) BY (instance, name) * 100) > 80
          for: 5m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: "Container CPU usage"
            description: "Container CPU usage is above 80%\n VALUE = {{ $value }}"
        - alert: RedisDown
          expr: redis_up == 0
          for: 0m
          labels:
            severity: critical
            namespace: monitoring
            env: stg
          annotations:
            summary: Redis down (instance {{ $labels.instance }})
            description: "Redis instance is down"
        - alert: HostHighCpuLoad
          expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
          for: 0m
          labels:
            severity: warning
            namespace: monitoring
            env: stg
          annotations:
            summary: Host high CPU load (instance {{ $labels.instance }})
            description: "CPU load is > 80%\n  VALUE = {{ $value }}"
        - alert: HostOutOfMemory
          expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: Host out of memory (instance {{ $labels.instance }})
            description: "Node memory is filling up (< 10% left)\n  VALUE = {{ $value }}"
        - alert: KubePersistentVolumeFillingUp
          annotations:
            description: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim }}
              in Namespace {{ $labels.namespace }} is only {{ $value | humanizePercentage }}
              free.
            summary: PersistentVolume is filling up.
          expr: |
            (
              kubelet_volume_stats_available_bytes{job="kubelet"}
                /
              kubelet_volume_stats_capacity_bytes{job="kubelet"}
            ) < 0.03
            and
            kubelet_volume_stats_used_bytes{job="kubelet"} > 0
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"} == 1
            unless on(namespace, persistentvolumeclaim)
            kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"} == 1
          for: 1m
          labels:
            severity: critical
        - alert: KubePodCrashLooping
          annotations:
            description: 'Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container
              }}) is in waiting state (reason: "CrashLoopBackOff").'
            summary: Pod is crash looping.
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff", job="kube-state-metrics"}[5m]) >= 1
          for: 15m
          labels:
            severity: warning
        - alert: KubePodNotReady
          annotations:
            description: Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready
              state for longer than 15 minutes.
            summary: Pod has been in a non-ready state for more than 15 minutes.
          expr: |
            sum by (namespace, pod) (
              max by(namespace, pod) (
                kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}
              ) * on(namespace, pod) group_left(owner_kind) topk by(namespace, pod) (
                1, max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"})
              )
            ) > 0
          for: 15m
          labels:
            severity: warning
