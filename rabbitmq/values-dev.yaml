encValues:
  rabbitmq-password: "AgB9HXYERUSe/Xw//Qgj+xyXIkmoj6UrMk/DSD5ful4G8An/ukqHzn6LNV7S81IFQ1CU7YoHduk+v/yzeJ6/PU0oxvMeM7ej/PXqFJPEOgISVLoVWHPtxvT1E/lfgel3M3jtz0XAZNg1RNWOp0Iq722F17fOd0Fb1VzUKztPehvGgl8sygKEisYqxfG2ptERjtlfgq0X1xC0dKAAGISZx5nLZ87DVSJ0HjgsJyPCvv1N5m4fFJ9vmMu2JLGxzV+Amyb4olF1jk76cPq0pKi8YZnUCKyjoZ7BuiNB89wiqbt01D5rCfxQDE4ELQuqALQ9a0sMbnXrUhPKTCNP5v5Yc0pRFbEP+0+C2yJ4s7OBQm0UzFzv5X9+VpexC/BcGQq+AOmi1z6OkpnSe3iYyHixOVgWvn9BQKM8UI0W5TcIhJ11B6Y3yVxKqLxzJYQc0NPt1LmKv9CQU7CgY63J8dplaULW3YVKmo5hw4IFmXgS6QP1vUKUxnZftbS+HGWkWchTSQ9meY3jkHZqlvFH1TsUk9BKtUBB/9Gtgg0Jzypkhjd66MZtLTFLB14k6B0C19A4orOaMY1mzK/7geys4v+2F641UMw32T8NuvMB1Pw0MfW1dkWWt35EhefqEByXgR+FW9jbzQV46FRhRgRbBtfrkvA2397u4Oo8UnPMHGk3SMCJ03g/x+aVw3cWhADmmsHodnR3sQ4QkQwv+vCDBwv477Q6IyVEbZDEilkOZBpwFF1cuQ=="
  rabbitmq-erlang-cookie: "AgCo6lFPfwGbZTiL4ct2tkqe+p2KqVSyQq3oUWl6vkoeixCsQKDOmt67yGCFooCywuFvhs8TMOcm3oXtvMVR8OcJJihCA5YgVZCjcPjRvgtfWGk+38nvZmhuZ7FjBUxcllPbvZCui1fg1+CvQmufB/FzjsBzvxOF6rV5kjc3HpIpJlRS2UQ5Da8MjMP0GqHJaAe1ByLjZuNa3NNkgXJt+XrxnH4RLdVwe44MSdUeZsTzWd+kCWDteSiPlsfAasl/kIyigo4zWNOp0bvRFXIcQPvTAnGlWrQdiOQGichp25loxQx9bDNVr2pysuFTatHIrTedMiHfSDbU+OH8XkM0LCXeElQyrZoiAVk5A2OvdJZbxc90PhxGcYjCNKhzw6p9EP711E9+GGBIX+QkKCrqBBecFDAzl1ELcnJNJ321kAwFZ+NnzGw/NbQsJRRKOeclMQcjmc0tjXANKvEUo+lA1/d9WUI+8cZUlHOzKqgmPT9J1tmIHFZjL4KkvLA7+NVgUUF9jfrlDaJ7F49ZSlUm+sqjBTr+Hr9xBMucxFDxiA2/7Ter6lqMG3UNPk6Q9lk1KOWeJnI2EAbVB+86qYF4fDMb+xCdkheBV1elsaPuZfid2niddVifYYjmZ/1fp212xIusH9iSzrZ1hL20ZtDG3/rVqzglyw1OORm6KK+lA/W0FQ12z75Gp51y5orCj3QLC6kWoD2OMH3tSYdn"

rabbitmq:
  global:
    imageRegistry: ""
    imagePullSecrets: []
    storageClass: ""
  clusterDomain: "superhero-dev"
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.12.4-debian-11-r0
    digest: ""
    debug: true
    pullPolicy: IfNotPresent
    pullSecrets: []
  auth:
    ## @param auth.username RabbitMQ application username
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    username: admin
    ## @param auth.password RabbitMQ application password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    #password: secretpassword
    #password: rabbitmq-secret/rabbitmq-password
    #password: {{ .Values.encValues.rabbitmq-password | b64enc | quote }}
    ## @param auth.securePassword Whether to set the RabbitMQ password securely. This is incompatible with loading external RabbitMQ definitions and 'true' when not setting the auth.password parameter.
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    securePassword: true
    ## @param auth.existingPasswordSecret Existing secret with RabbitMQ credentials (must contain a value for `rabbitmq-password` key)
    ## e.g:
    ## existingPasswordSecret: name-of-existing-secret
    ##
    existingPasswordSecret: "rabbitmq-secret"
    ## @param auth.enableLoopbackUser If enabled, the user `auth.username` can only connect from localhost
    ##
    enableLoopbackUser: false
    ## @param auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    erlangCookie: ""
    ## @param auth.existingErlangSecret Existing secret with RabbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key)
    ## e.g:
    ## existingErlangSecret: name-of-existing-secret
    ##
    existingErlangSecret: "rabbitmq-secret"
  persistence:
    ## @param persistence.enabled Enable RabbitMQ data persistence using PVC
    ##
    enabled: true
    ## @param persistence.storageClass PVC Storage Class for RabbitMQ data volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "hcloud-volume"
    ## @param persistence.selector Selector to match an existing Persistent Volume
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
    ## @param persistence.accessModes PVC Access Modes for RabbitMQ data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param persistence.existingClaim Provide an existing PersistentVolumeClaims
    ## The value is evaluated as a template
    ## So, for example, the name can depend on .Release or .Chart
    ##
    existingClaim: ""
    ## @param persistence.mountPath The path the volume will be mounted at
    ## Note: useful when using custom RabbitMQ images
    ##
    mountPath: /bitnami/rabbitmq/mnesia
    ## @param persistence.subPath The subdirectory of the volume to mount to
    ## Useful in dev environments and one PV for multiple services
    ##
    subPath: ""
    ## @param persistence.size PVC Storage Request for RabbitMQ data volume
    ## If you change this value, you might have to adjust `rabbitmq.diskFreeLimit` as well
    ##
    size: 50Gi
    ## @param persistence.annotations Persistence annotations. Evaluated as a template
    ## Example:
    ## annotations:
    ##   example.io/disk-volume-type: SSD
    ##
    annotations: {}
    ## @param persistence.labels Persistence labels. Evaluated as a template
    ## Example:
    ## labels:
    ##   app: my-app
    labels: {}
  ingress:
    enabled: true
    path: /
    pathType: ImplementationSpecific
    hostname: "rabbitmq.dev.service.aepps.com"
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
  ## Network Policy configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: true
    ## @param networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports RabbitMQ is listening
    ## on. When true, RabbitMQ will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.additionalRules Additional NetworkPolicy Ingress "from" rules to set. Note that all rules are OR-ed.
    ## e.g:
    ## additionalRules:
    ##  - matchLabels:
    ##    - role: frontend
    ##  - matchExpressions:
    ##    - key: role
    ##      operator: In
    ##      values:
    ##        - frontend
    ##
    additionalRules: []
  clustering:
    enabled: true
  extraEnvVars:
  - name: RABBITMQ_ULIMIT_NOFILES
    value: ""

