encValues:
  rabbitmq-password: "AgC5HEstNVyYpXbDSXQXgLro2tf7KS+63M83MF+DNAAB4Z3py6N+rz8RbMG38U4l+GfOepwszxxpBDf0USYEi70FXb10ajPbYHmBa1U4gy75xs3RN7879nA5zQtmY/doJYjaklk8QSaJfrGPKYP/GmeLB2zvxBQs2ZAXzSR83oD+ZjYTd2WMh5ssJ560A8U5fNcxqg4Q8/zZWr2PtFVpTjhNIxFQ5frntZ+nkumlkKOA1HbZkbYbgpZUtxwQCXM6g+NI8aOeaDV4yWhnOM4t9sU/SmRSHPllJGCpJ8MzKvNyxYoZQ+rK2cp8PLw/ODDVPTyEN9uIizBOTwbU4XDEetd/7qHZzk4p3lIlicR0Z/XavP6mxj9DmM1lFvdH3juEJOf4WWcttwPxgbSwcFTYvjCD5c/1W7psdfDZUhSLl/ae1bHog8IapvhgnC1+W/3V2tL+jMUKmOIJz3CdziESPCgi/KDUasMcfSw2c4EKxVMDizcY1D6eJE10lQTCourdOqGM/Yn/PZn5qyojqsOZVcO40gT2xIjgdXayo8be3S2boVacUH138wO7wgdR6s7hMRd68wOqMLtc3eUdtMeEIOhKNrqoZ9pCPRRyeefF6jKcCM3hupz5mQmnsW12FxYrCxmOgsQHlomE3TAvUDU7gILKT9MP1WCeSmWPdkNQn+XbobOG0ACMOFciKUnnIh9mC5rdZvrzk5vX1jtdvQG6DhaP"
  rabbitmq-erlang-cookie: "AgCf2Ip/WLpROlxClds+gAw2RDm6QR2QHnj5PI405WVXV36yQwsGIFJ6HVDiSX7+smbaAz88c3WHXb6f3d9SeVnNzPxYBcOt47lRY9Oo6r8StzCw6bUaDvDrURBFWylqc71mGC8KfSEA9u6JDfZb6zhLbys4iXCmqJBEcOJXRhrDRl1bxxnx9iLL6U5kH5kPhQlKrgd5zEqlV+K98kcGeLbwNj76qXxz+xQ4fHm0vos35RJYNv/oiIxl1DvlkXjgMklDaftGJ+0xspLlungppLKOoZvENy77EV6/vSgjqj1mjyJV4rb+ByFs1TpdFFGFG9Wz7iPegPvrEjjIJtZ0VxYD5THAOjV0G+jW6LZ7zf6/v7WogaC2z21csFJY88LsLHlf444P3W3czbMjfiwAfPv+e2fK6pc08Np/3DJ8K0sfMKJYABA9GjWTOuGwz7TmpFIWY9Df6YJTKow/lTdwmLk+E3WvTu1JqKZ8H/VEOqUbrRf1PEcedlF+SY2WmjdZg79unr7VADl8tlMd9u4hZepHftTORGlt7O97AE6mP4iVc39E9zGcyNz16B0XER5On4mNrhBEEJIuP0lx/QPax3lfSVDvDFOigCpObMSeHXA9Qn/jXclv6EskJr+l7jCrYFbn8kgWIpd/gR6SITSdEJYYwnemI5qag0nPuStSaN5zH//gcFOA0hqGTk2mU5OxZrKdR5+uU0tH0p21daslk24QWkQZipAi9pC14sxboGXAtQ=="

rabbitmq:
  global:
    imageRegistry: ""
    imagePullSecrets: []
    storageClass: ""
  clusterDomain: "superhero-dev"
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.12.4-debian-11-r0
    digest: ""
    debug: true
    pullPolicy: IfNotPresent
    pullSecrets: []
  auth:
    ## @param auth.username RabbitMQ application username
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    username: admin
    ## @param auth.password RabbitMQ application password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    #password: secretpassword
    #password: rabbitmq-secret/rabbitmq-password
    #password: {{ .Values.encValues.rabbitmq-password | b64enc | quote }}
    ## @param auth.securePassword Whether to set the RabbitMQ password securely. This is incompatible with loading external RabbitMQ definitions and 'true' when not setting the auth.password parameter.
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    securePassword: true
    ## @param auth.existingPasswordSecret Existing secret with RabbitMQ credentials (must contain a value for `rabbitmq-password` key)
    ## e.g:
    ## existingPasswordSecret: name-of-existing-secret
    ##
    existingPasswordSecret: "rabbitmq-secret"
    ## @param auth.enableLoopbackUser If enabled, the user `auth.username` can only connect from localhost
    ##
    enableLoopbackUser: false
    ## @param auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    erlangCookie: ""
    ## @param auth.existingErlangSecret Existing secret with RabbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key)
    ## e.g:
    ## existingErlangSecret: name-of-existing-secret
    ##
    existingErlangSecret: "rabbitmq-secret"
  persistence:
    ## @param persistence.enabled Enable RabbitMQ data persistence using PVC
    ##
    enabled: true
    ## @param persistence.storageClass PVC Storage Class for RabbitMQ data volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "hcloud-volume"
    ## @param persistence.selector Selector to match an existing Persistent Volume
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
    ## @param persistence.accessModes PVC Access Modes for RabbitMQ data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param persistence.existingClaim Provide an existing PersistentVolumeClaims
    ## The value is evaluated as a template
    ## So, for example, the name can depend on .Release or .Chart
    ##
    existingClaim: ""
    ## @param persistence.mountPath The path the volume will be mounted at
    ## Note: useful when using custom RabbitMQ images
    ##
    mountPath: /bitnami/rabbitmq/mnesia
    ## @param persistence.subPath The subdirectory of the volume to mount to
    ## Useful in dev environments and one PV for multiple services
    ##
    subPath: ""
    ## @param persistence.size PVC Storage Request for RabbitMQ data volume
    ## If you change this value, you might have to adjust `rabbitmq.diskFreeLimit` as well
    ##
    size: 50Gi
    ## @param persistence.annotations Persistence annotations. Evaluated as a template
    ## Example:
    ## annotations:
    ##   example.io/disk-volume-type: SSD
    ##
    annotations: {}
    ## @param persistence.labels Persistence labels. Evaluated as a template
    ## Example:
    ## labels:
    ##   app: my-app
    labels: {}
  ingress:
    enabled: true
    path: /
    pathType: ImplementationSpecific
    hostname: "rabbitmq.dev.service.aepps.com"
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
  ## Network Policy configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: true
    ## @param networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports RabbitMQ is listening
    ## on. When true, RabbitMQ will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.additionalRules Additional NetworkPolicy Ingress "from" rules to set. Note that all rules are OR-ed.
    ## e.g:
    ## additionalRules:
    ##  - matchLabels:
    ##    - role: frontend
    ##  - matchExpressions:
    ##    - key: role
    ##      operator: In
    ##      values:
    ##        - frontend
    ##
    additionalRules: []
  clustering:
    enabled: true
